#!/usr/bin/php
<?php
ini_set('max_execution_time', 5000);
define('VERSION', '1.0');
define('TEMP_FOLDER', 'twinky_temp_data/');
define('IGNORE_FILE', '.twinkyIgnore');
/*
 * принимаем все аргументы скрипта и 
 * формируем массив $arguments['аргумент']='значение'
 * 
 */
for ($a = 1; $a < $argc; $a++) {
    $arg = explode('=', $argv[$a]);
    if (isset($arg[1]))
        $arguments[$arg[0]] = $arg[1];
    else
        $arguments[$arg[0]] = true;
}

echo "\n";
echo "Twinky php parser version " . VERSION . "\n";
if (!isset($arguments['-t']))
    die('use "-t" to add tags' . "\n");

@mkdir(TEMP_FOLDER, 0777);



$pattern = "/\/\* *(.*)#start *\*\/(.|\s)*?\/\* *(.*)#end *\*\//"; //php

$tags = explode(',', $arguments['-t']);

function recurse_copy($src, $dst) {
    file_put_contents(IGNORE_FILE, null, FILE_APPEND);
     $ignore_file = str_replace('/', '\/', file_get_contents(IGNORE_FILE));
    $ignore_file = array_diff(explode("\n", $ignore_file), ['']);
    $exclude = rtrim($dst, '/');
    

    
    $dir = opendir($src);
    @mkdir($dst);
    while (false !== ( $file = readdir($dir))) {
        if (( $file != '.' ) && ( $file != '..' ) && $file != $exclude) {
            foreach ($ignore_file as $ignore) {
               //echo "$ignore $file\n";
                if (preg_match("/$ignore".'$'."/", $file)) {
                    //echo "break\n";
                    continue 2;
                }
            }
            if (is_dir($src . '/' . $file)) {
                recurse_copy($src . '/' . $file, $dst . '/' . $file);
            } else {
                copy($src . '/' . $file, $dst . '/' . $file);
            }
        }
    }
    closedir($dir);
   
}

function directoryToArray($directory, $recursive) {
    $array_items = array();
    if ($handle = opendir($directory)) {
        while (false !== ($file = readdir($handle))) {
            if ($file != "." && $file != "..") {
                if (is_dir($directory . "/" . $file)) {
                    if ($recursive) {
                        $array_items = array_merge($array_items, directoryToArray($directory . "/" . $file, $recursive));
                    }
                    $file = $directory . "/" . $file;
                    $array_items[] = preg_replace("/\/\//si", "/", $file);
                } else {
                    $file = $directory . "/" . $file;
                    $array_items[] = preg_replace("/\/\//si", "/", $file);
                }
            }
        }
        closedir($handle);
    }
    return $array_items;
}

recurse_copy(getcwd(), TEMP_FOLDER);
$files = directoryToArray(TEMP_FOLDER, true);

//var_dump($files);
//die();
//$files = array_diff(scandir(getcwd()), array('..', '.'));
//var_dump($files);
//die();


$all_tags = array();

foreach ($files as $file) {
    $file_contents = file_get_contents($file);
    preg_match_all($pattern, $file_contents, $match);
// var_dump($match[1]);
//die();
    foreach ($match[1] as $tag_name_found) {
        if ($tag_name_found != null && !in_array($tag_name_found, $all_tags))
            $all_tags[] = $tag_name_found;
    }
}
//var_dump($all_tags);
$used_tags = [];
$unused_tags = [];
foreach ($all_tags as $tag) {
    if (in_array($tag, $tags))
        $used_tags[] = $tag;
    else
        $unused_tags[] = $tag;
}

echo "\n";
echo "Tags enabled: " . implode(', ', $used_tags) . "\n";
if (count($unused_tags) > 0)
    echo "Tags disabled: " . implode(', ', $unused_tags) . "\n";

echo "\n";


foreach ($files as $file) {
    if (!is_dir($file)) {
        $file_contents = file_get_contents($file);
        preg_match_all($pattern, $file_contents, $match);
//var_dump($match[0]);
        foreach ($match[0] as $tag_with_content) {
            /* Узнаем тэг
             * Проверяем тэг
             * Заменяем нутрь
             * заменяем в файле
             */
            preg_match_all($pattern, $tag_with_content, $tag_name_found);
            $tag_name_found = $tag_name_found[1][0];

            if (!in_array($tag_name_found, $tags)) {
                $new_tag_with_content = preg_replace('/\n(?!\/\/)(?!\/\*)/', "\n//", $tag_with_content);
                $file_contents = str_replace($tag_with_content, $new_tag_with_content, $file_contents);
//die($file_contents);
            } else {
                $new_tag_with_content = preg_replace('/\/\//', "", $tag_with_content);
                $file_contents = str_replace($tag_with_content, $new_tag_with_content, $file_contents);
            }
        }
        file_put_contents($file, $file_contents);
    }
}
$folder = explode('/', getcwd());
$folder = $folder[count($folder) - 1];
$a = '';
while (file_exists($folder . $a . '.twinky.zip')) {
    $a++;
}
$archive_name = $folder . $a . '.twinky.zip';
//die($archive_name);

$zip = new ZipArchive();
if ($zip->open($archive_name, ZIPARCHIVE::CREATE) !== TRUE) {
    die("Could not open archive");
}

$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(TEMP_FOLDER));

foreach ($iterator as $key => $value) {
    if ($value == '.' || $value == '..')
        continue;
    $key = str_replace(TEMP_FOLDER, '', $key);
//echo "$key \n";
    $zip->addFile(realpath($key), $key) or die("ERROR: Could not add file: $key");
}
$zip->close();
echo "Archive created: $archive_name\n";



$it = new RecursiveDirectoryIterator(TEMP_FOLDER, RecursiveDirectoryIterator::SKIP_DOTS);
$it_files = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);
foreach ($it_files as $file) {
    if ($file->isDir()) {
        rmdir($file->getRealPath());
    } else {
        unlink($file->getRealPath());
    }
}
rmdir(TEMP_FOLDER);

